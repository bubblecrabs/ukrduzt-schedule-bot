from datetime import datetime
from urllib.parse import urlparse

from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from app.filters.admin import AdminFilter
from app.services.mailing import create_mailing_task
from app.services.users import get_users
from app.utils.keyboards import mailing_kb, back_button_kb
from app.utils.states import MailingStates

router = Router()


@router.callback_query(F.data == "manage_mailing", AdminFilter())
async def manage_mailing_handler(call: CallbackQuery, state: FSMContext) -> None:
    """Handles the manage_mailing callback query."""
    message_data = await state.get_data()

    text = message_data.get("text", "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    image = message_data.get("image", "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    button_text = message_data.get("button_text", "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    button_url = message_data.get("button_url", "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    scheduled = message_data.get("delay", "–ù–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ")
    is_button_set = "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if button_text != "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" else "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

    text_message = (
        f"‚ÑπÔ∏è <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑—Å–∏–ª–∫—É:</b>\n\n"
        f"‚úçÔ∏è <b>–¢–µ–∫—Å—Ç:</b> {text}\n"
        f"üåÑ <b>–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è:</b> {image}\n"
        f"‚èπÔ∏è <b>–ö–Ω–æ–ø–∫–∞ –ø—ñ–¥ —Ç–µ–∫—Å—Ç–æ–º:</b> {is_button_set}\n"
        f"üí¨ <b>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b> {button_text}\n"
        f"üîó <b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏:</b> {button_url}\n"
        f"‚è∞ <b>–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞:</b> {scheduled}\n"
    )
    await call.message.edit_text(
        text=text_message,
        reply_markup=mailing_kb(),
        disable_web_page_preview=True,
    )


@router.callback_query(F.data == "add_text", AdminFilter())
async def add_text_handler(call: CallbackQuery, state: FSMContext) -> None:
    """Handles the add_text callback query."""
    await call.message.edit_text(
        text="üí¨ <b>–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.</b>",
        reply_markup=back_button_kb("manage_mailing"),
    )
    await state.set_state(MailingStates.text)


@router.message(StateFilter(MailingStates.text), AdminFilter())
async def set_text_handler(message: Message, state: FSMContext) -> None:
    """Handles the text message."""
    if len(message.text) > 2000:
        await message.answer(text="‚ÅâÔ∏è <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ ‚Äî 2000 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.</b>")
        return

    await state.update_data(text=message.html_text)
    await message.answer(
        text="‚úÖ <b>–¢–µ–∫—Å—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.</b>",
        reply_markup=back_button_kb("manage_mailing"),
    )


@router.callback_query(F.data == "add_media", AdminFilter())
async def add_media_handler(call: CallbackQuery, state: FSMContext) -> None:
    """Handles the add_media callback query."""
    await call.message.edit_text(
        text="üåÑ <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.</b>",
        reply_markup=back_button_kb("manage_mailing"),
    )
    await state.set_state(MailingStates.media)


@router.message(StateFilter(MailingStates.media), AdminFilter())
async def set_media_handler(message: Message, state: FSMContext) -> None:
    """Handles the media message."""
    if not message.photo:
        await message.answer(text="‚ÅâÔ∏è <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.</b>")
        return

    photo_id = message.photo[-1].file_id
    await state.update_data(image=photo_id)
    await message.answer(
        text="‚úÖ <b>–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.</b>",
        reply_markup=back_button_kb("manage_mailing"),
    )


@router.callback_query(F.data == "add_button", AdminFilter())
async def add_button_handler(call: CallbackQuery, state: FSMContext) -> None:
    """Handles the add_button callback query."""
    await call.message.edit_text(
        text="üîò <b>–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏.</b>",
        reply_markup=back_button_kb("manage_mailing"),
    )
    await state.set_state(MailingStates.button_text)


@router.message(StateFilter(MailingStates.button_text), AdminFilter())
async def set_button_text_handler(message: Message, state: FSMContext) -> None:
    """Handles the button text message."""
    if len(message.text) > 35:
        await message.answer(text="‚ÅâÔ∏è <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ ‚Äî 35 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.</b>")
        return

    await state.update_data(button_text=message.html_text)
    await message.answer(text="üîó <b>–í–≤–µ–¥—ñ—Ç—å URL –¥–ª—è –∫–Ω–æ–ø–∫–∏.</b>")
    await state.set_state(MailingStates.button_url)


@router.message(StateFilter(MailingStates.button_url), AdminFilter())
async def set_button_url_handler(message: Message, state: FSMContext) -> None:
    """Handles the button url message."""
    parsed_url = urlparse(message.html_text)

    if not all([parsed_url.scheme, parsed_url.netloc]):
        await message.answer(text="‚ÅâÔ∏è <b>–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.</b>")
        return

    await state.update_data(button_url=message.html_text)
    await message.answer(
        text="‚úÖ <b>–ö–Ω–æ–ø–∫–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞.</b>",
        reply_markup=back_button_kb("manage_mailing"),
    )


@router.callback_query(F.data == "add_delay", AdminFilter())
async def add_delay_handler(call: CallbackQuery, state: FSMContext) -> None:
    """Handles the add_delay callback query."""
    await call.message.edit_text(
        text=(
            f"üïí <b>–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —ñ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏.</b>\n\n"
            f"üìÜ <b>–§–æ—Ä–º–∞—Ç - <code>{datetime.now().strftime('%d.%m.%Y %H:%M')}</code> UTC+0</b>"
        ),
        reply_markup=back_button_kb("manage_mailing"),
    )
    await state.set_state(MailingStates.delay)


@router.message(StateFilter(MailingStates.delay), AdminFilter())
async def set_delay_handler(message: Message, state: FSMContext) -> None:
    """Handles the delay message."""
    try:
        datetime.strptime(message.html_text, "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer(text="‚ÅâÔ∏è <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: –¥–¥.–º–º.—Ä—Ä—Ä—Ä –≥–≥:—Ö—Ö</b>")
        return

    await state.update_data(delay=message.html_text)
    await message.answer(
        text="‚úÖ <b>–ß–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.</b>",
        reply_markup=back_button_kb("manage_mailing"),
    )


@router.callback_query(F.data == "reset_mailing", AdminFilter())
async def reset_mailing_handler(call: CallbackQuery, state: FSMContext) -> None:
    """Handles the reset_mailing callback query."""
    await state.clear()
    await call.message.edit_text(
        text="‚úÖ <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑—Å–∏–ª–∫—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞.</b>",
        reply_markup=back_button_kb("manage_mailing"),
    )


@router.callback_query(F.data == "start_mailing", AdminFilter())
async def start_mailing_handler(call: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """Handles the start_mailing callback query."""
    message_data = await state.get_data()

    text = message_data.get("text")
    image = message_data.get("image")
    button_text = message_data.get("button_text")
    button_url = message_data.get("button_url")
    delay = message_data.get("delay")

    if not text and not image:
        await call.message.answer(text="‚ÅâÔ∏è <b>–í–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.</b>")
        return

    if delay:
        await call.message.edit_text(text="‚úÖ <b>–†–æ–∑—Å–∏–ª–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∞.</b>")
    else:
        await call.message.edit_text(text="‚úÖ <b>–†–æ–∑—Å–∏–ª–∫—É –∑–∞–ø—É—â–µ–Ω–æ.</b>")

    async for user in get_users(session=session):
        mailing_data = {
            "chat_id": str(user.user_id),
            "text": text,
            "image": image,
            "button_text": button_text,
            "button_url": button_url,
            "delay": delay
        }
        await create_mailing_task(mailing_data)